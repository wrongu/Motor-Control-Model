% fillSelfOBstacles.m
% Richard Lange
% July 20 2011
%
% The space in which the robot's arm is free to move begins as totally open.
% Pass the memory of postures (variable 'B' from initMBPP.m) to this script
% to fill cells that intersect with the robot itself as 'obstacles'
%
% the assumption is that 0,0,0 is as labeled on the brainbot (where the
% base meets the axis of torsoYaw), and the dimensions are in inches. 
%
% to distinguish between obstacles that move when the robot changes
% position vs ones that are constant in all postures, different numbers are
% used as flags. 1 means constant obstacle, 2 means it changes as the
% torso servos change 

function B = fillSelfObstacles(B)

    n = nthroot(numel(B), 3);
    w = B(1,1,1).width;
    l = B(1,1,1).length;
    h = B(1,1,1).height;

    % robot base:
    % a constant obstacle
    flag = 1;
    % x from [-5, 5] (inches)
    % y from [-5.5, 5.5]
    % z from [-2.5, 0]

    xlow = -5;
    xhi = 5;

    ylow = -5.5;
    yhi = 5.5;

    zlow = -2.5;
    zhi = 0;
    
    
    [lox_ind, loy_ind, loz_ind, ~] = findCell([xlow, ylow, zlow], n, w, l, h);
    [hix_ind, hiy_ind, hiz_ind, ~] = findCell([xhi, yhi, zhi], n, w, l, h);
    B(lox_ind:hix_ind, loy_ind:hiy_ind, loz_ind:hiz_ind).obstacle = flag;


    % robot body:
    % dynamic obstacle
    flag = 2;
    % x from [-2.5, 2]
    % y from [-2.25, 2.25]
    % z from [0,8]

    xlow = -2.5;
    xhi = 2;
    ylow = -2.25;
    yhi = 2.25;
    y = [ylow:l:yhi, yhi];

    zlow = 0;
    zhi = 8;
    z = [zlow:h:zhi, zhi];

    for i=x
        for j=y
            for k=z
                [~, ~, ~, ind] = findCell([i,j,k], n, w, l, h);
                B(ind).obstacle = flag;
            end
        end
    end
    

    % cameras:
    % dynamic obstacle
    flag = 2;
    % x from [-1.5, 3.5]
    % y from [-3.25, 3.25]
    % z from [9,11]

    xlow = -1.5;
    xhi = 3.5;
    x = [xlow:w:xhi, xhi];

    ylow = -3.25;
    yhi = 3.25;
    y = [ylow:l:yhi, yhi];

    zlow = 9;
    zhi = 11;
    z = [zlow:h:zhi, zhi];

    for i=x
        for j=y
            for k=z
                [~, ~, ~, ind] = findCell([i,j,k], n, w, l, h);
                B(ind).obstacle = flag;
            end
        end
    end
    
    % treads (both sides):
    % constant obstacles
    flag = 1;
    B = fillObstacles_Treads(B, 2, flag); % 2nd arg:  1 = box, 2 = triangle
    
end