%Divya Gunasekaran
%Feb. 16, 2011

% Select the posture for which all the joints move simultaneously by roughly 
%the same amount
%initPosture is a row vector of 11 angles (for right or left side)

function posture = selectPosture1(sock, A, position, initPosture, side, weight_s, weight_v)
%(sock, A, i, j ,k, side)
%


%Names of arm and torso servos
servoNames = {'TorsoYaw', 'TorsoPitchOne', 'TorsoPitchTwo', 'RightShoulderRotator', 'RightShoulderPitch',...  
    'RightElbow', 'RightWrist', 'LeftShoulderRotator',...
    'LeftShoulderPitch', 'LeftElbow', 'LeftWrist'};


%Lengths of robot arm segments
rotatorToShoulder = 0.5;
shoulderToElbow = 4.125;
elbowToWrist = 2; 
wristToGripper = 6.5;

shoulderRotator = rotatorToShoulder + shoulderToElbow + elbowToWrist + wristToGripper;
torsoYaw = shoulderRotator*2;
shoulderPitch = shoulderRotator - rotatorToShoulder;
elbow = shoulderPitch - shoulderToElbow;
wrist = elbow - elbowToWrist;

armLengths = {torsoYaw, 0, 0, shoulderRotator, shoulderPitch, elbow, wrist};

lengthSum = 0;
for i=1:length(armLengths)
    lengthSum = lengthSum + armLengths{i};
end


%Find cell to which given position belongs
[n n n] = size(A);
w = A{1,1,1}.width;
l = A{1,1,1}.length;
h = A{1,1,1}.height;
[i, j, k] = findCell(position, n, w, l, h)

%Get all possible postures appropriate cell for the given side (right or
%left)
if(strcmp(side, 'left'))
    Postures = A{i,j,k}.l_postures; %matrix of postures of left side
    currPosture = [initPosture(1) initPosture(2) initPosture(3) initPosture(8) initPosture(9) initPosture(10) allPostures(11)];
elseif (strcmp(side, 'right'))
    Postures = A{i,j,k}.r_postures; %matrix of postures of right side
    currPosture = [allPostures(1) allPostures(2) allPostures(3) allPostures(4) allPostures(5) allPostures(6) allPostures(7)];
else
    disp('Error: please specify left or right side');
    posture = -1;
    return;
end

[numPostures numAngles] = size(Postures); %Get dimensions of matrix of postures
minCost = 1000000; %initially set minCost to "infinity"
minPostureIndex = 1;

spatialErrorVector = zeros(1,numPostures);
travelCostVector = zeros(1,numPostures);

%If cell has registered postures
%Calculate the standard deviation across joint angles of robot's current 
%position and each registered posture and choose the registered posture
%with the smallest standard deviation
if(numPostures > 1)
    %For each set of postures (skip first because it's all zeros)
    for i=2:numPostures

        %Calculate the difference between each pair of joint angles
%       diffVector = zeros(1, 7); %store difference between each pair of angles
        spatialError = 0;
%         sumDiff = 0;
%         limbIndicator = 0;
%         disp(i);
%        
%         %Add weighting for distance of joint movement and 
%         %length of limb segments
%         for j=1:numAngles
%             %Absolute angular displacement
%             diff = abs(Postures(i,j)-currPosture(1,j));
%             
%             %Joint expense factor
%             k = (armLengths{j}/lengthSum);
%             
%             limbIndicator = limbIndicator + diff*k;
% %             diff = abs(Postures(i,j)-currPosture(1,j))*(armLengths{j}/lengthSum);
%             
%             sumDiff = sumDiff + diff^2;
% %             diffVector(1, j) = diff^2;
% %             diffVector(2, j) = diff*(armLengths{i}/lengthSum)           
%         end
        
        %Calculate spatial error cost
        %For right gripper
        if(strcmp(side, 'right'))
            potentialPosture = [Postures(i,:) 0 0 0 0];
            [rightPoint leftPoint intermedJoints] = ForwardKinematics_V4(potentialPosture);
            %Euclidean distance between pos. of right gripper and target
            spatialError = sqrt((rightPoint(1) - position(1))^2 + (rightPoint(2) - position(2))^2 + (rightPoint(3)-position(3))^2);
        %For left gripper
        elseif(strcmp(side, 'left'))
            potentialPosture = [Postures(i,1) Postures(i,2) Postures(i,3) 0 0 0 0 Postures(i,4) Postures(i,5) Postures(i,6) Postures(i,7)];
            [rightPoint leftPoint intermedJoints] = ForwardKinematics_V4(potentialPosture);
            %Euclidean distance between pos. of left gripper and target
            spatialError = sqrt((leftPoint(1) - position(1))^2 + (leftPoint(2) - position(2))^2 + (leftPoint(3)-position(3))^2);
        end
        spatialErrorVector(i) = spatialError;
        
        %Calculate travel cost
        travelCostVector(i) = TravelCost(Postures(i,:), currPosture);
        
%         sumDiff = 0;  
%         for n=1:length(diffVector);
%             sumDiff = diffVector(1,n) + sumDiff;
%         end
%         stdDev = sqrt(sumDiff / numAngles);
%         postureRating = stdDev*weight_d + limbIndicator*weight_l + spatialError*weight_s
%         if(postureRating <= minChange)
%             minChange = postureRating;
%             minPostureIndex = i;
%         end
    end
    
    MaxS = max(spatialErrorVector); 
    MaxV = max(travelCostVector);
    
    %Select the posture with the minimum total cost
    for i=2:numPostures
        totalCost = weight_s*(spatialErrorVector(i)/MaxS) + weight_v*(travelCostVector(i)/MaxV);
        if(totalCost <= minCost)
            minCost = totalCost;
            minPostureIndex = i;
        end
    end
else
    disp('Error: No registered postures for this position.');
    posture = [];
    return;
end

posture = Postures(minPostureIndex, :);



