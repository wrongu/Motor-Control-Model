%Divya Gunasekaran
%Alternative Forward Kinematics test

function [rightPt leftPt] = AltForwardKinematics(angles)

l1 = 7.75;
l2 = 4.125;
l3 = 0.5;
l4 = 4.3;
l5 = 3.3125;
l6 = 2.75;

a1 = angles(1);
a23 = (angles(2)-angles(3))/2;
a4 = angles(4);
a5 = angles(5);
a6 = angles(6);

xR = l1*sin(-a6)*cos(-a5)*cos(-a4)*cos(a23)*cos(a1) + ...
    l1*cos(-a6)*sin(-a5)*cos(-a4)*cos(a23)*cos(a1) + ...
    l2*sin(-a5)*cos(-a4)*cos(a23)*cos(a1) + l3*cos(-a4)*cos(a23)*cos(a1) - ...
    l1*sin(-a6)*cos(-a5)*sin(-a4)*sin(a23)*cos(a1) - l1*cos(-a6)*sin(-a5)*sin(-a4)*sin(a23)*cos(a1) - ...
    l2*sin(-a5)*sin(-a4)*sin(a23)*cos(a1) - l3*sin(-a4)*sin(a23)*cos(a1) + ...
    l4*sin(a23)*cos(a1) - l1*sin(-a6)*sin(-a5)*sin(a1) + l1*cos(-a6)*cos(-a5)*sin(a1) + ...
    l2*cos(-a5)*sin(a1) + l5*sin(a1);

yR = l1*sin(-a6)*cos(-a5)*cos(-a4)*cos(a23)*sin(a1) + ...
    l1*cos(-a6)*sin(-a5)*cos(-a4)*cos(a23)*sin(a1) + ...
    l2*sin(-a5)*cos(-a4)*cos(a23)*sin(a1) + l3*cos(-a4)*cos(a23)*sin(a1) - ...
    l1*sin(-a6)*cos(-a5)*sin(-a4)*sin(a23)*sin(a1) - ...
    l1*cos(-a6)*sin(-a5)*sin(-a4)*sin(a23)*sin(a1) - l2*sin(-a5)*sin(-a4)*sin(a23)*sin(a1) - ...
    l3*sin(-a4)*sin(a23)*sin(a1) + l4*sin(a23)*sin(a1) + l1*sin(-a6)*sin(-a5)*cos(a1) - ...
    l1*cos(-a6)*cos(-a5)*cos(a1) - l2*cos(-a5)*cos(a1) - l5*cos(a1);

zR = -l1*sin(-a6)*cos(-a5)*cos(-a4)*sin(a23) - l1*cos(-a6)*sin(-a5)*cos(-a4)*sin(a23) - ...
    l2*sin(-a5)*cos(-a4)*sin(a23) - l3*cos(-a4)*sin(a23) - l1*sin(-a6)*cos(-a5)*sin(-a4)*cos(a23) - ...
    l1*cos(-a6)*sin(-a5)*sin(-a4)*cos(a23) - l2*sin(-a5)*sin(-a4)*cos(a23) - ...
    l3*sin(-a4)*cos(a23) + l4*cos(a23) + l6;


xL = -l1*sin(-a10)*cos(-a9)*cos(a8)*cos(a23)*cos(a1) - ...
    l1*cos(-a10)*sin(-a9)*cos(a8)*cos(a23)*cos(a1) - ...
    l2*sin(-a9)*cos(a8)*cos(a23)*cos(a1) + l3*cos(a8)*cos(a23)*cos(a1) + ...
    l1*sin(-a10)*cos(-a9)*sin(a8)*sin(a23)*cos(a1) + l1*cos(-a10)*sin(-a9)*sin(a8)*sin(a23)*cos(a1) + ...
    l2*sin(-a9)*sin(a8)*sin(a23)*cos(a1) - l3*sin(a8)*sin(a23)*cos(a1) + ...
    l4*sin(a23)*cos(a1) + l1*sin(-a10)*sin(-a9)*sin(a1) - l1*cos(-a10)*cos(-a9)*sin(a1) - ...
    l2*cos(-a9)*sin(a1) - l5*sin(a1);

yL = -l1*sin(-a10)*cos(-a9)*cos(a8)*cos(a23)*sin(a1) - ...
    l1*cos(-a10)*sin(-a9)*cos(a8)*cos(a23)*sin(a1) - ...
    l2*sin(-a9)*cos(a8)*cos(a23)*sin(a1) + l3*cos(a8)*cos(a23)*sin(a1) + ...
    l1*sin(-a10)*cos(-a9)*sin(a8)*sin(a23)*sin(a1) + ...
    l1*cos(-a10)*sin(-a9)*sin(a8)*sin(a23)*sin(a1) + l2*sin(-a9)*sin(a8)*sin(a23)*sin(a1) - ...
    l3*sin(a8)*sin(a23)*sin(a1) + l4*sin(a23)*sin(a1) - l1*sin(-a10)*sin(-a9)*cos(a1) + ...
    l1*cos(-a10)*cos(-a9)*cos(a1) + l2*cos(-a9)*cos(a1) + l5*cos(a1);

zL = l1*sin(-a10)*cos(-a9)*cos(a8)*sin(a23) + l1*cos(-a10)*sin(-a9)*cos(a8)*sin(a23) + ...
    l2*sin(-a9)*cos(a8)*sin(a23) - l3*cos(a8)*sin(a23) + l1*sin(-a10)*cos(-a9)*sin(a8)*cos(a23) + ...
    l2*sin(-a9)*sin(a8)*cos(a23) - ...
    l3*sin(a8)*cos(a23) + l4*cos(a23) + l6;

rightPt = [xR yR zR];
leftPt = [xL yL zL];
% 
% servoNames = {'RightShoulderRotator', 'RightShoulderPitch',...  
%     'RightElbow', 'RightWrist', 'RightGripper', 'LeftShoulderRotator',...
%     'LeftShoulderPitch', 'LeftElbow', 'LeftWrist', 'LeftGripper', ...
%     'TorsoYaw', 'HeadPitch', 'HeadYaw', 'TorsoPitchOne', 'TorsoPitchTwo'};
% 
% %Position limits for arm and torso servos -- [lower bound, upper bound]
% servoLimits = {[0,1022], [170,829], [151,885], [0,1022], [290,772], [0,1022], ... 
%      [230,870], [151,885], [0,1022], [373,672], [0,1022], [352,708], ...
%      [0,1022], [500,525], [500,525]};
% %angles(1) = TorsoYaw
% %angles(2) = TorsoPitchOne
% %angles(3) = TorsoPitchTwo
% %angles(4) = RightShoulderRotator
% %angles(5) = RightShoulderPitch
% %angles(6) = RightElbow
% %angles(7) = RightWrist
% %angles(8) = LeftShoulderRotator
% %angles(9) = LeftShoulderPitch
% %angles(10) = LeftElbow
% %angles(11) = LeftWrist
%  angles = [988 520 508 9 800 153 1000 98 1001 0 0];